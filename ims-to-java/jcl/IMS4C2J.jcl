//IMS3#C2J JOB ,
// MSGCLASS=H,REGION=0M,COND=(4,LT)
//*************************************************************
//*
//* Created by Olivier Gauneau
//*
//* Test non OO interoperability in an IMS BMP region
//* using cjbuild utility to generate JNI code automatically.
//*
//* 1- Create new GSAM DBD with DD OGIVD5O (see IMSRUN step)
//* 2- Create a new PSB to access IVPDB1 and the new GSM output
//* 3- Build the ACB
//* 4- Copy it to the active ACBLIB (dirty I know :( )
//* 5- Create the PSB config in IMS
//* 6- Build the inline COBOL program with JNI generated by cjbuild
//* 7- Start the PSB
//* 8- Run the COBOL program and PSB in IMS BMP region
//*
//* IVPDB1 should be exported to DD OGIVD5O
//* Java classes/jar need to be already installed in IMS
//* ie -Djava.class.path=/u/gauneau/dev/ims/ogsamples.jar:....
//*    in dfsjvmpr.props
//*
//* note:
//*
//* JCL variables (&VAR.) are substituted in STDENV DD
//* so that STDPARM DD is similar to a USS shell script
//* and uses env variables ($VAR.)
//*************************************************************
//PROCS JCLLIB ORDER=(IMS1510.IF1A.PROCLIB)
//*
// SET IMSNODE1=DFS.V15RXM0
// SET IMSNODE2=IMS1510.IF1A
//        EXPORT SYMLIST=*
// SET LIBPRFX='CEE'
// SET JAVAHOME='/usr/lpp/java/J11.0_64'
// SET COBHOME='/u/sandbox/usr/cobol/V6R4M0'
// SET COBPRFX='IGY.V6R4M0'
// SET LOADLIB='BUILDER.TEST.PDSE.LOAD'
//* Java class is compiled nad package in a jar file that can be found
//* by the IMS BMP region through JVMOPMAS argument
// SET BMPJAR='/u/gauneau/dev/ims/oghello.jar'
// SET WORKDIR='/u/gauneau/tmp/c2j'
// SET COBOLPRG='IMS4C2J'
// SET QUOTE=''''
//*************************************************************
//* Create a DBD in IMS DBDLIB
//* NODE1 & NODE2 are opposite compared to my CSLUSPOC and IMSBATCH...
//*************************************************************
//DBDGEN   EXEC DBDGEN,SOUT=A,MBR=OGDB5,
//         NODE1=&IMSNODE2.,
//         NODE2=&IMSNODE1.
//C.SYSIN DD *
  DBD    NAME=OGDB5,ACCESS=(GSAM,BSAM)
  DATASET DD1=OGIVD5O,RECFM=F,RECORD=80
  DBDGEN
  FINISH
  END
/*
//*************************************************************
//* Create PSB in IMS PSBLIB
//*************************************************************
//PSBGEN   EXEC PSBGEN,SOUT=A,MBR=OGIVP64,
//         NODE1=&IMSNODE2.,
//         NODE2=&IMSNODE1.
//*C.SYSIN DD DISP=SHR,DSN=GAUNEAU.CASE.JCL(OGIVP64)
//C.SYSIN DD *
*---+----1----+----2----+----3----+----4----+----5----+----6----+----7*
         PCB    TYPE=DB,DBDNAME=IVPDB1,PROCOPT=A,KEYLEN=10,SB=COND,    X
               PCBNAME=TELEPCB1
         SENSEG NAME=A1111111,PARENT=0,PROCOPT=A
         PCB    TYPE=GSAM,DBDNAME=OGDB5,PROCOPT=L,                     X
               PCBNAME=OGPCB2
         PSBGEN LANG=COBOL,PSBNAME=OGIVP64,CMPAT=YES,OLIC=YES
         END
/*
//*************************************************************
//* Create ACB in IMS staging ACBLIB
//*************************************************************
//ACBGEN   EXEC ACBGEN,SOUT=A,
//         NODE1=&IMSNODE2.,
//         NODE2=&IMSNODE1.
//G.SYSIN DD *
   BUILD PSB=OGIVP64
/*
//*
//* Promote it to active ACBLIB
//* My IMS has local online change enabled so I do a quick and dirty
//* copy to the active ACBLIB :-(
//* /MODIFY PREPARE ACBLIB
//* /DISPLAY MODIFY ALL
//* /MODIFY COMMIT ACBLIB
//*
//CPYACB EXEC PGM=IEBCOPY,REGION=4M
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DSN=&IMSNODE2..ACBLIB,DISP=SHR
//SYSUT2   DD DSN=&IMSNODE2..ACBLIBA,DISP=SHR
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1))
//SYSUT4   DD UNIT=VIO,SPACE=(CYL,(1))
//SYSIN    DD *
   COPY INDD=SYSUT1,OUTDD=SYSUT2
           SELECT MEMBER=((OGIVP64,R))
/*
//*************************************************************
//* Declare my PSB in IMS
//*************************************************************
//IMSDCLR   EXEC PGM=CSLUSPOC,
//  PARM=('IMSPLEX=PLEXA')
//STEPLIB  DD DISP=SHR,DSN=&IMSNODE1..SDFSRESL
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD *

* query status
 DELETE PGM NAME(OGIVP64)
 CREATE PGM NAME(OGIVP64)  SET(BMPTYPE(Y) GPSB(N))
 QUERY PGM NAME(OGIVP64) SHOW(ALL)
/*
//*
//*************************************************************
//* Create the USS Java build env
//*************************************************************
//*
//MKUSS  EXEC PGM=BPXBATCH,COND=(4,LT)
//STDPARM  DD *,SYMBOLS=EXECSYS
SH echo WORK_DIR=$WORK_DIR;
rm -rf $WORK_DIR;
mkdir $WORK_DIR;
cd $WORK_DIR;
mkdir src;
mkdir src/og;
mkdir src/og/ims;
mkdir src/og/ims/ivp;
mkdir javaiop;
mkdir class;
echo USS env created
/*
//STDOUT   DD SYSOUT=*
//STDERR   DD SYSOUT=*
//STDENV   DD *,SYMBOLS=JCLONLY
WORK_DIR=&WORKDIR.
/*
//*
//*************************************************************
//* Create methods file containing the Java methods called
//*  by COBOL
//* This file is used by cjbuild in step CJBLD
//*************************************************************
//*
//MKMTHD  EXEC PGM=BPXBATCH,COND=(4,LT)
//STDPARM  DD *,SYMBOLS=EXECSYS
SH echo WORK_DIR=$WORK_DIR;
cd $WORK_DIR;

echo Java.og.ims.samples.ExportIVPDB1.exportAllToConsole > methods;

/*
//STDOUT   DD SYSOUT=*
//STDERR   DD SYSOUT=*
//STDENV   DD *,SYMBOLS=JCLONLY
WORK_DIR=&WORKDIR.
//*
//*************************************************************
//* Create the COBOL source file
//*************************************************************
//*
//MKCOB EXEC PGM=IKJEFT01,COND=(4,LT)
//USS        DD PATH='&WORKDIR./src/&COBOLPRG..cbl',
//             PATHOPTS=(OWRONLY,OCREAT),
//             PATHMODE=(SIRWXU,SIRGRP,SIXGRP,SIROTH,SIXOTH)
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
OCOPY INDD(CBLSRC) OUTDD(USS) TEXT CONVERT(YES) PATHOPTS(USE)
/*
//CBLSRC    DD *
       CBL PGMNAME(LONGMIXED)
      *
      * Calls a Java class
      *
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'IMS4C2J' is recursive.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       77 CT-PROG-NAME        PIC X(8)   VALUE "IMS4C2J".

       01 JAVA-INT  PIC S9(9) COMP-5.
       01 JAVA-RC   PIC S9(9) sign leading separate.

       01 JAVA-ARGS.
          05 JAVA-PSB-ARG PIC X(8).
          05 JAVA-DRIVER-ARG PIC X(3).
          05 JAVA-LOGLEVEL-ARG PIC X(5).

       01 JAVA-DRIVER PIC X(3).
               88 DRIVER-DLI VALUE 'DLI'.
               88 DRIVER-SQL VALUE 'SQL'.
       01 JAVA-LOGLEVEL PIC X(5).
               88 LOGLEVEL-DEBUG VALUE 'DEBUG'.
               88 LOGLEVEL-INFO  VALUE 'INFO '.

       LINKAGE SECTION.
       01  IOPCB.
           02  LTERM-NAME      PIC  X(8).
           02  IO-RESERVE-IMS  PIC  X(2).
           02  IO-STATUS       PIC  X(2).
           02  CURR-DATE       PIC  X(4).
           02  CURR-TIME       PIC  X(4).
           02  IN-MSN          PIC  X(4).
           02  MODNAME         PIC  X(8).
           02  USERID          PIC  X(8).
           02  GROUP-NAME      PIC  X(8).
           02  TIME-STAMP      PIC  X(12).
           02  USERID-IND      PIC  X(1).
      *
      * DB PCB to IVPDB1
      *
       01  DBPCB.
           02  DBD-NAME        PIC  X(8).
           02  SEG-LEVEL       PIC  X(2).
           02  DBSTATUS        PIC  X(2).
           02  PROC-OPTIONS    PIC  X(4).
           02  RESERVE-DLI     PIC  X(4).
           02  SEG-NAME-FB     PIC  X(8).
           02  LENGTH-FB-KEY   PIC  9(4).
           02  NUMB-SENS-SEGS  PIC  9(4).
           02  KEY-FB-AREA     PIC  X(17).
      *
      * GSAM output PCB to OGDB5
      *
       01  GOPCB.
           02  DBD-NAME        PIC  X(8).
           02  SEG-LEVEL       PIC  X(2).
           02  GO-STATUS       PIC  X(2).
           02  PROC-OPTIONS    PIC  X(4).
           02  RESERVE-DLI     PIC  x(4).
           02  SEG-NAME-FB     PIC  X(8).
           02  LENGTH-FB-KEY   PIC  9(4).
           02  NUMB-SENS-SEGS  PIC  9(4).
           02  KEY-FB-AREA     PIC  X(17).


       PROCEDURE DIVISION USING IOPCB, DBPCB, GOPCB.


       MAIN-RTN.
           DISPLAY 'COBOL says hello from ' CT-PROG-NAME.
           DISPLAY 'IOPCB.USERID=' USERID IN IOPCB ','
            USERID-IND IN IOPCB
      * check if USERID is a PSB
           IF  USERID-IND = 'P' THEN
               MOVE USERID TO JAVA-PSB-ARG
      *  set Java driver to DLI or SQL
               SET DRIVER-DLI TO TRUE
      *  set Log level for the Java program
               SET LOGLEVEL-INFO TO TRUE
      *
               PERFORM CALL-JAVA
               DISPLAY "Java returned:" JAVA-RC
               MOVE JAVA-RC TO RETURN-CODE
           ELSE
               MOVE 8 TO RETURN-CODE
           END-IF.
           DISPLAY 'End'.
           GOBACK
           .

       CALL-JAVA.
           DISPLAY 'Call to Java, start'
           MOVE JAVA-DRIVER TO JAVA-DRIVER-ARG
           MOVE JAVA-LOGLEVEL TO JAVA-LOGLEVEL-ARG

      * calling Java in a BMP
           CALL 'Java.og.ims.samples.ExportIVPDB1.exportAllToConsole'
               USING JAVA-PSB-ARG JAVA-DRIVER-ARG JAVA-LOGLEVEL-ARG
               RETURNING JAVA-INT
           ON EXCEPTION
              DISPLAY "Java Exception occurred"
              MOVE 16 TO RETURN-CODE
              GOBACK
           END-CALL
      * convert Java return code
           MOVE JAVA-INT TO JAVA-RC
      * return it as COBOL return code
           MOVE JAVA-RC TO RETURN-CODE
           DISPLAY 'Call to Java, end'
           .
/*
//*
//*************************************************************
//* compile COBOL program (see file <COBOLPRG>.lst)
//*  and generate COBOL program Java.og.HelloWorld.sayHelloTo
//* which calls Java JNI to call og.HelloWorld.sayHelloTo()
//*************************************************************
//*
//BLDCOB  EXEC PGM=BPXBATCH,COND=(4,LT)
//STDPARM  DD *,SYMBOLS=EXECSYS
SH echo WORK_DIR=$WORK_DIR;
export PATH=$PATH:$COBPATH;
echo $PATH;
cd $WORK_DIR;
cob2 -c ./src/${CBLPRG}.cbl \
 "-qjavaiop(OUTPATH('$WORK_DIR/javaiop'),JAVA64)";
/*
//STDOUT   DD SYSOUT=*
//STDERR   DD SYSOUT=*
//STDENV   DD *,SYMBOLS=JCLONLY
WORK_DIR=&WORKDIR.
COBPATH=&COBHOME./bin
STEPLIB=&COBPRFX..SIGYCOMP
CBLPRG=&COBOLPRG.
/*
//*
//*************************************************************
//* call CJBuild to
//*    - generate COBOL IOP (IGYCJEST and IGYCJIMC)
//*    - compile Java and COBOL IOP programs
//*    - generate a DLL import file (libc2ji.x)
//*    - link it all into BUILDER.TEST.PDSE.LOAD(LIBC2JI)
//*************************************************************
//*
//CJBLD  EXEC PGM=BPXBATCH,COND=(4,LT)
//STDPARM  DD *,SYMBOLS=EXECSYS
SH echo WORK_DIR=$WORK_DIR;
export PATH=$PATH:$COBPATH:$JAVA_HOME/bin;
echo $PATH;
cd $WORK_DIR;
cjbuild -v  -p og.ims.jiop
  -m MIX_31_64
  -c $WORK_DIR/javaiop
  -d "//'$LOADLIB'"
  -s $WORK_DIR/src -j $WORK_DIR/class methods c2j3;
/*
//STDOUT   DD SYSOUT=*
//STDERR   DD SYSOUT=*
//STDENV   DD *,SYMBOLS=JCLONLY
WORK_DIR=&WORKDIR.
LOADLIB=&LOADLIB.
COBPATH=&COBHOME./bin
STEPLIB=&COBPRFX..SIGYCOMP
JAVA_HOME=&JAVAHOME
/*
//*
//*************************************************************
//* Link them all
//* - <CBLPRG>.o
//* - Java and COBOL IOP programs in LIBC2J
//*************************************************************
//*
//LINK  EXEC PGM=BPXBATCH,COND=(4,LT)
//STDPARM  DD *,SYMBOLS=EXECSYS
SH echo WORK_DIR=$WORK_DIR;
export PATH=$PATH:$COBPATH:$JAVA_HOME/bin;
echo $PATH;
cd $WORK_DIR;
cob2 ./${CBLPRG}.o -o "//'$LOADLIB(${CBLPRG})'"
 ./libc2j3.x;

/*
//STDOUT   DD SYSOUT=*
//STDERR   DD SYSOUT=*
//STDENV   DD *,SYMBOLS=JCLONLY
LOADLIB=&LOADLIB.
WORK_DIR=&WORKDIR.
COBPATH=&COBHOME./bin
STEPLIB=&COBPRFX..SIGYCOMP
CBLPRG=&COBOLPRG.
/*
//****************************************************
//* Configure IMS
//* IVP PSB DFSIVP64 is normally already declared by default
//* Just need to make sure it is started.
//****************************************************
//IMSSTART   EXEC PGM=CSLUSPOC,
//  PARM=('IMSPLEX=PLEXA')
//STEPLIB  DD DISP=SHR,DSN=&IMSNODE1..SDFSRESL
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD *

* start PSB
 UPDATE PGM NAME(OGIVP64) START(SCHD)

* query status
 QUERY PGM NAME(OGIVP64) SHOW(DB)
/*
//*
//****************************************************
//* Run COBOL program in a BMP region with Java 64 bit
//*
//*****************************************************
//*
//IMSRUN  EXEC PROC=IMSBMP64,
//         MBR=&COBOLPRG.,
//         PSB=OGIVP64,
//         NODE1=&IMSNODE1.,
//         NODE2=&IMSNODE2.,
//* using Java 11
//         ENVIRON=DFSJ64EV,
//         JVMOPMAS=OGJVMMS,
//         SOUT='*',
//         IMSID=IF1A,
//         RGN=0M
//* adding my proclib GAUNEAU.CASE.JCL containing
//* DFSJVMAP with my mapping of OGJBP1 to my class
//* OGJVMMS with location of my jar files
//G.PROCLIB  DD DSN=GAUNEAU.CASE.JCL,DISP=SHR
//           DD DSN=&NODE2..&SYS2.PROCLIB,DISP=SHR
//* output GSAM GOPCB
//OGIVD5O DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80)
//*
